#include <stdio.h>
#include <stdlib.h>

// Structure for 2-3 Tree node
struct Node {
    int keys[2]; // Array to hold keys
    struct Node* children[3]; // Array to hold child pointers
    int keyCount; // Number of keys currently in the node
};

// Function to create a new node
struct Node* createNode(int key) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->keys[0] = key;
    newNode->keyCount = 1;
    for (int i = 0; i < 3; ++i)
        newNode->children[i] = NULL;
    return newNode;
}

// Function to split a full node during insertion
void splitNode(struct Node* parentNode, int index, struct Node* childNode) {
    struct Node* newChildNode = createNode(childNode->keys[1]);

    if (childNode->children[0] != NULL && childNode->children[1] != NULL) {
        newChildNode->children[0] = childNode->children[1];
        newChildNode->children[1] = childNode->children[2];
    }

    childNode->keyCount = 1;
    parentNode->children[2] = parentNode->children[1];
    parentNode->children[1] = newChildNode;
    parentNode->children[0] = childNode;
    parentNode->keys[1] = parentNode->keys[0];
    parentNode->keys[0] = childNode->keys[1];
    parentNode->keyCount++;
}

// Function to insert a key into the 2-3 Tree
struct Node* insert(struct Node* root, int key) {
    if (root == NULL) {
        root = createNode(key);
        return root;
    }

    if (root->keyCount == 1) {
        if (key < root->keys[0]) {
            root->keys[1] = root->keys[0];
            root->keys[0] = key;
        } else {
            root->keys[1] = key;
        }
        root->keyCount++;
        return root;
    } else {
        if (key < root->keys[0]) {
            root->children[0] = insert(root->children[0], key);
        } else if (key > root->keys[1]) {
            root->children[2] = insert(root->children[2], key);
        } else {
            root->children[1] = insert(root->children[1], key);
        }

        if (root->children[0] != NULL && root->children[1] != NULL && root->children[2] != NULL) {
            splitNode(root, 1, root->children[1]);
        }
    }
    return root;
}

// Function to perform inorder traversal of the 2-3 Tree
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->children[0]);
        printf("%d ", root->keys[0]);
        inorder(root->children[1]);
        if (root->keyCount > 1) {
            printf("%d ", root->keys[1]);
            inorder(root->children[2]);
        }
    }
}

// Driver c
int main()
{
    printf("B TREE\n");
    printf("TANUJA P , 192321052\n");
    struct Node* root = NULL;
    int keys[] = {10, 5, 15, 20, 12, 6, 7};

    for (int i = 0; i < sizeof(keys) / sizeof(keys[0]); i++)
        root = insert(root, keys[i]);

    printf("Inorder traversal of the 2-3 Tree: ");
    inorder(root);
    printf("\n");

    return 0;
}

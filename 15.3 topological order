#include <stdio.h>
#include <stdlib.h>
struct Node
{
    int data;
    struct Node* next;
};
struct Graph
{
    int vertices;
    struct Node** adjList;
    int* inDegree;
};
struct Graph* initializeGraph(int vertices)
{
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->vertices = vertices;
    graph->adjList = (struct Node**)malloc(vertices * sizeof(struct Node*));
    graph->inDegree = (int*)malloc(vertices * sizeof(int));
    for (int i = 0; i < vertices; i++)
    {
        graph->adjList[i] = NULL;
        graph->inDegree[i] = 0;
    }

    return graph;
}
void addEdge(struct Graph* graph, int src, int dest)
{
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = dest;
    newNode->next = graph->adjList[src];
    graph->adjList[src] = newNode;
    graph->inDegree[dest]++;
}
void topologicalSortDFS(struct Graph* graph, int v, int visited[], int stack[], int* stackIndex)
{
    visited[v] = 1;
    struct Node* current = graph->adjList[v];
    while (current != NULL)
    {
        if (!visited[current->data])
        {
            topologicalSortDFS(graph, current->data, visited, stack, stackIndex);
        }
        current = current->next;
    }
    stack[(*stackIndex)++] = v;
}
void topologicalSort(struct Graph* graph)
{
    int* visited = (int*)malloc(graph->vertices * sizeof(int));
    int* stack = (int*)malloc(graph->vertices * sizeof(int));
    int stackIndex = 0;
    for (int i = 0; i < graph->vertices; i++)
    {
        visited[i] = 0;
    }
    for (int i = 0; i < graph->vertices; i++)
    {
        if (!visited[i])
        {
            topologicalSortDFS(graph, i, visited, stack, &stackIndex);
        }
    }
    printf("Topological Ordering: ");
    while (stackIndex > 0) {
        printf("%d ", stack[--stackIndex]);
    }
    printf("\n");

    free(visited);
    free(stack);
}

int main()
{
    printf("Topological Ordering \n");
    printf("TANUJA P , 192321052\n");
    printf("\n");
    int vertices = 6;
    struct Graph* graph = initializeGraph(vertices);
    addEdge(graph, 5, 2);
    addEdge(graph, 5, 0);
    addEdge(graph, 4, 0);
    addEdge(graph, 4, 1);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 1);
    topologicalSort(graph);
    return 0;
}
